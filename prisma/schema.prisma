generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model appointment {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date           DateTime         @db.Timestamp(6)
  time           DateTime         @db.Timestamp(6)
  patient_id     String           @db.Uuid
  clinic_id      String           @db.Uuid
  status         String           @db.VarChar(255)
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  clinic         clinic           @relation(fields: [clinic_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user             @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  billing        billing[]
  medical_record medical_record[]
}

model billing {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount         Int
  billing_date   DateTime    @db.Timestamp(6)
  patient_id     String      @db.Uuid
  appointment_id String      @db.Uuid
  status         String      @db.VarChar(255)
  created_at     DateTime    @default(now()) @db.Timestamp(6)
  updated_at     DateTime    @default(now()) @db.Timestamp(6)
  appointment    appointment @relation(fields: [appointment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user        @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model clinic {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description         String?               @db.VarChar(255)
  location            String?               @db.VarChar(255)
  opening_hours       String?               @db.VarChar(255)
  closing_hours       String?               @db.VarChar(255)
  name                String                @db.VarChar(255)
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  updated_at          DateTime              @default(now()) @db.Timestamp(6)
  user_id             String                @db.Uuid
  tenant_id           String                @db.VarChar(255)
  appointment         appointment[]
  user                user                  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  healthcare_provider healthcare_provider[]
}

model healthcare_provider {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  specialty        String   @db.VarChar(255)
  clinic_id        String   @db.Uuid
  user_id          String   @db.Uuid
  license_number   String   @db.VarChar(255)
  experience_years Int
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  clinic           clinic   @relation(fields: [clinic_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model medical_record {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  patient_id     String      @db.Uuid
  diagnosis      String      @db.VarChar(255)
  prescription   String      @db.VarChar(255)
  notes          String?     @db.VarChar(255)
  appointment_id String      @db.Uuid
  created_at     DateTime    @default(now()) @db.Timestamp(6)
  updated_at     DateTime    @default(now()) @db.Timestamp(6)
  appointment    appointment @relation(fields: [appointment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user        @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email               String                @unique @db.VarChar(255)
  firstName           String?               @db.VarChar(255)
  lastName            String?               @db.VarChar(255)
  roq_user_id         String                @db.VarChar(255)
  tenant_id           String                @db.VarChar(255)
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  updated_at          DateTime              @default(now()) @db.Timestamp(6)
  appointment         appointment[]
  billing             billing[]
  clinic              clinic[]
  healthcare_provider healthcare_provider[]
  medical_record      medical_record[]
}
